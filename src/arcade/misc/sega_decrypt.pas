unit sega_decrypt;

interface

procedure decrypt_sega(memoria,mem_dec:pbyte;juego:byte);

implementation
const
  convtable:array[0..6,0..31,0..3] of byte=(
     //Pitfall II
	 (( $a0,$80,$a8,$88 ), ( $a0,$80,$a8,$88 ),	// ...0...0...0...0 */
		( $08,$88,$28,$a8 ), ( $28,$a8,$20,$a0 ),	// ...0...0...0...1 */
		( $a0,$80,$a8,$88 ), ( $a0,$80,$a8,$88 ),	// ...0...0...1...0 */
		( $a0,$a8,$20,$28 ), ( $a0,$a8,$20,$28 ),	// ...0...0...1...1 */
		( $a0,$80,$a8,$88 ), ( $20,$00,$a0,$80 ),	// ...0...1...0...0 */
		( $28,$a8,$20,$a0 ), ( $20,$00,$a0,$80 ),	// ...0...1...0...1 */
		( $a0,$a8,$20,$28 ), ( $a0,$a8,$20,$28 ),	// ...0...1...1...0 */
		( $28,$a8,$20,$a0 ), ( $a0,$a8,$20,$28 ),	// ...0...1...1...1 */
		( $20,$00,$a0,$80 ), ( $80,$88,$a0,$a8 ),	// ...1...0...0...0 */
		( $80,$88,$a0,$a8 ), ( $80,$88,$a0,$a8 ),	// ...1...0...0...1 */
		( $a0,$a8,$20,$28 ), ( $a0,$80,$a8,$88 ),	// ...1...0...1...0 */
		( $80,$88,$a0,$a8 ), ( $28,$a8,$20,$a0 ),	// ...1...0...1...1 */
		( $20,$00,$a0,$80 ), ( $80,$88,$a0,$a8 ),	// ...1...1...0...0 */
		( $80,$88,$a0,$a8 ), ( $20,$00,$a0,$80 ),	// ...1...1...0...1 */
		( $a0,$a8,$20,$28 ), ( $a0,$80,$a8,$88 ),	// ...1...1...1...0 */
		( $80,$88,$a0,$a8 ), ( $28,$a8,$20,$a0 )),// ...1...1...1...1 */
    //Teddyboy blues
   (( $20,$28,$00,$08 ), ( $80,$00,$a0,$20 ),	// ...0...0...0...0 */
		( $20,$28,$00,$08 ), ( $a0,$a8,$20,$28 ),	// ...0...0...0...1 */
		( $28,$08,$a8,$88 ), ( $a0,$80,$a8,$88 ),	// ...0...0...1...0 */
		( $a0,$a8,$20,$28 ), ( $a0,$80,$a8,$88 ),	// ...0...0...1...1 */
		( $20,$28,$00,$08 ), ( $28,$08,$a8,$88 ),	// ...0...1...0...0 */
		( $a0,$a8,$20,$28 ), ( $a0,$a8,$20,$28 ),	// ...0...1...0...1 */
		( $a0,$80,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...0...1...1...0 */
		( $a0,$a8,$20,$28 ), ( $28,$08,$a8,$88 ),	// ...0...1...1...1 */
		( $80,$00,$a0,$20 ), ( $80,$00,$a0,$20 ),	// ...1...0...0...0 */
		( $a0,$20,$a8,$28 ), ( $a0,$a8,$20,$28 ),	// ...1...0...0...1 */
		( $a0,$20,$a8,$28 ), ( $a0,$80,$a8,$88 ),	// ...1...0...1...0 */
		( $a0,$80,$a8,$88 ), ( $a0,$80,$a8,$88 ),	// ...1...0...1...1 */
		( $80,$00,$a0,$20 ), ( $20,$28,$00,$08 ),	// ...1...1...0...0 */
		( $a0,$a8,$20,$28 ), ( $a0,$20,$a8,$28 ),	// ...1...1...0...1 */
		( $80,$00,$a0,$20 ), ( $a0,$80,$a8,$88 ),	// ...1...1...1...0 */
		( $a0,$a8,$20,$28 ), ( $a0,$20,$a8,$28 )),	// ...1...1...1...1 */
    //Pengo
   (( $a0,$80,$a8,$88 ), ( $28,$a8,$08,$88 ),	// ...0...0...0...0 */
		( $28,$a8,$08,$88 ), ( $a0,$80,$a8,$88 ),	// ...0...0...0...1 */
		( $a0,$80,$20,$00 ), ( $a0,$80,$20,$00 ),	// ...0...0...1...0 */
		( $08,$28,$88,$a8 ), ( $a0,$80,$a8,$88 ),	// ...0...0...1...1 */
		( $08,$00,$88,$80 ), ( $28,$a8,$08,$88 ),	// ...0...1...0...0 */
		( $a0,$80,$20,$00 ), ( $08,$00,$88,$80 ),	// ...0...1...0...1 */
		( $a0,$80,$20,$00 ), ( $a0,$80,$20,$00 ),	// ...0...1...1...0 */
		( $a0,$80,$20,$00 ), ( $00,$08,$20,$28 ),	// ...0...1...1...1 */
		( $88,$80,$08,$00 ), ( $a0,$80,$20,$00 ),	// ...1...0...0...0 */
		( $88,$80,$08,$00 ), ( $00,$08,$20,$28 ),	// ...1...0...0...1 */
		( $08,$28,$88,$a8 ), ( $08,$28,$88,$a8 ),	// ...1...0...1...0 */
		( $a0,$80,$a8,$88 ), ( $a0,$80,$20,$00 ),	// ...1...0...1...1 */
		( $08,$00,$88,$80 ), ( $88,$80,$08,$00 ),	// ...1...1...0...0 */
		( $00,$08,$20,$28 ), ( $88,$80,$08,$00 ),	// ...1...1...0...1 */
		( $08,$28,$88,$a8 ), ( $08,$28,$88,$a8 ),	// ...1...1...1...0 */
		( $08,$00,$88,$80 ), ( $a0,$80,$20,$00 )),	// ...1...1...1...1 */
    //Mr Viking
   (( $28,$a8,$08,$88 ), ( $88,$80,$08,$00 ),	// ...0...0...0...0 */
		( $88,$08,$80,$00 ), ( $88,$80,$08,$00 ),	// ...0...0...0...1 */
		( $28,$08,$a8,$88 ), ( $28,$a8,$08,$88 ),	// ...0...0...1...0 */
		( $88,$08,$80,$00 ), ( $88,$08,$80,$00 ),	// ...0...0...1...1 */
		( $28,$08,$a8,$88 ), ( $88,$80,$08,$00 ),	// ...0...1...0...0 */
		( $88,$80,$08,$00 ), ( $28,$a8,$08,$88 ),	// ...0...1...0...1 */
		( $a0,$80,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...0...1...1...0 */
		( $a0,$80,$a8,$88 ), ( $a0,$80,$a8,$88 ),	// ...0...1...1...1 */
		( $88,$80,$08,$00 ), ( $88,$80,$08,$00 ),	// ...1...0...0...0 */
		( $88,$08,$80,$00 ), ( $88,$80,$08,$00 ),	// ...1...0...0...1 */
		( $a0,$80,$20,$00 ), ( $28,$08,$a8,$88 ),	// ...1...0...1...0 */
		( $a0,$80,$20,$00 ), ( $88,$08,$80,$00 ),	// ...1...0...1...1 */
		( $28,$08,$a8,$88 ), ( $a0,$80,$20,$00 ),	// ...1...1...0...0 */
		( $a0,$80,$20,$00 ), ( $a0,$80,$20,$00 ),	// ...1...1...0...1 */
		( $a0,$80,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...1...1...1...0 */
		( $a0,$80,$20,$00 ), ( $a0,$80,$a8,$88 )),	// ...1...1...1...1 */
    //Sega Ninja
   (( $88,$a8,$80,$a0 ), ( $88,$08,$80,$00 ),	// ...0...0...0...0 */
		( $28,$a8,$08,$88 ), ( $a0,$a8,$80,$88 ),	// ...0...0...0...1 */
		( $a8,$a0,$28,$20 ), ( $a8,$a0,$28,$20 ),	// ...0...0...1...0 */
		( $28,$a8,$08,$88 ), ( $a0,$a8,$80,$88 ),	// ...0...0...1...1 */
		( $28,$08,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...0...1...0...0 */
		( $28,$a8,$08,$88 ), ( $88,$08,$80,$00 ),	// ...0...1...0...1 */
		( $28,$08,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...0...1...1...0 */
		( $28,$a8,$08,$88 ), ( $a8,$a0,$28,$20 ),	// ...0...1...1...1 */
		( $88,$08,$80,$00 ), ( $88,$a8,$80,$a0 ),	// ...1...0...0...0 */
		( $a0,$a8,$80,$88 ), ( $28,$a8,$08,$88 ),	// ...1...0...0...1 */
		( $a8,$a0,$28,$20 ), ( $88,$a8,$80,$a0 ),	// ...1...0...1...0 */
		( $a8,$a0,$28,$20 ), ( $28,$a8,$08,$88 ),	// ...1...0...1...1 */
		( $28,$08,$a8,$88 ), ( $88,$a8,$80,$a0 ),	// ...1...1...0...0 */
		( $28,$08,$a8,$88 ), ( $28,$08,$a8,$88 ),	// ...1...1...0...1 */
		( $88,$a8,$80,$a0 ), ( $88,$a8,$80,$a0 ),	// ...1...1...1...0 */
		( $a8,$a0,$28,$20 ), ( $28,$08,$a8,$88 )),	// ...1...1...1...1 */
    //Up and Down
   (( $08,$88,$00,$80 ), ( $a0,$20,$80,$00 ),	// ...0...0...0...0 */
		( $a8,$a0,$28,$20 ), ( $88,$a8,$80,$a0 ),	// ...0...0...0...1 */
		( $88,$80,$08,$00 ), ( $28,$08,$a8,$88 ),	// ...0...0...1...0 */
		( $88,$a8,$80,$a0 ), ( $28,$08,$a8,$88 ),	// ...0...0...1...1 */
		( $88,$a8,$80,$a0 ), ( $a0,$20,$80,$00 ),	// ...0...1...0...0 */
		( $a8,$a0,$28,$20 ), ( $a8,$a0,$28,$20 ),	// ...0...1...0...1 */
		( $88,$80,$08,$00 ), ( $88,$a8,$80,$a0 ),	// ...0...1...1...0 */
		( $88,$a8,$80,$a0 ), ( $88,$a8,$80,$a0 ),	// ...0...1...1...1 */
		( $a0,$20,$80,$00 ), ( $a0,$20,$80,$00 ),	// ...1...0...0...0 */
		( $08,$88,$00,$80 ), ( $28,$08,$a8,$88 ),	// ...1...0...0...1 */
		( $88,$a8,$80,$a0 ), ( $88,$80,$08,$00 ),	// ...1...0...1...0 */
		( $88,$a8,$80,$a0 ), ( $28,$08,$a8,$88 ),	// ...1...0...1...1 */
		( $88,$a8,$80,$a0 ), ( $88,$a8,$80,$a0 ),	// ...1...1...0...0 */
		( $88,$a8,$80,$a0 ), ( $88,$a8,$80,$a0 ),	// ...1...1...0...1 */
		( $88,$80,$08,$00 ), ( $88,$80,$08,$00 ),	// ...1...1...1...0 */
		( $08,$88,$00,$80 ), ( $28,$08,$a8,$88 )),	// ...1...1...1...1 */
    //Flicky
   (( $08,$88,$00,$80 ), ( $a0,$80,$a8,$88 ),	// ...0...0...0...0 */
		( $80,$00,$a0,$20 ), ( $88,$80,$08,$00 ),	// ...0...0...0...1 */
		( $a0,$80,$a8,$88 ), ( $28,$08,$20,$00 ),	// ...0...0...1...0 */
		( $28,$08,$20,$00 ), ( $a0,$80,$a8,$88 ),	// ...0...0...1...1 */
		( $08,$88,$00,$80 ), ( $80,$00,$a0,$20 ),	// ...0...1...0...0 */
		( $80,$00,$a0,$20 ), ( $88,$80,$08,$00 ),	// ...0...1...0...1 */
		( $28,$08,$20,$00 ), ( $28,$08,$20,$00 ),	// ...0...1...1...0 */
		( $28,$08,$20,$00 ), ( $88,$80,$08,$00 ),	// ...0...1...1...1 */
		( $08,$88,$00,$80 ), ( $a8,$88,$28,$08 ),	// ...1...0...0...0 */
		( $a8,$88,$28,$08 ), ( $80,$00,$a0,$20 ),	// ...1...0...0...1 */
		( $28,$08,$20,$00 ), ( $88,$80,$08,$00 ),	// ...1...0...1...0 */
		( $a8,$88,$28,$08 ), ( $88,$80,$08,$00 ),	// ...1...0...1...1 */
		( $08,$88,$00,$80 ), ( $80,$00,$a0,$20 ),	// ...1...1...0...0 */
		( $a8,$88,$28,$08 ), ( $80,$00,$a0,$20 ),	// ...1...1...0...1 */
		( $28,$08,$20,$00 ), ( $28,$08,$20,$00 ),	// ...1...1...1...0 */
		( $08,$88,$00,$80 ), ( $88,$80,$08,$00 )));	// ...1...1...1...1 */

procedure decrypt_sega(memoria,mem_dec:pbyte;juego:byte);
var
  f:word;
  _xor,src,row,col:byte;
  ptemp,ptemp2:pbyte;
begin
for f:=0 to $7fff do begin
  _xor:=0;
  ptemp:=memoria;
  inc(ptemp,f);
  src:=ptemp^;
  //pick the translation table from bits 0, 4, 8 and 12 of the address */
  row:=(f and 1)+(((f shr 4) and 1) shl 1)+(((f shr 8) and 1) shl 2)+(((f shr 12) and 1) shl 3);
  // pick the offset in the table from bits 3 and 5 of the source data */
  col:=((src shr 3) and 1)+(((src shr 5) and 1) shl 1);
  // the bottom half of the translation table is the mirror image of the top */
  if (src and $80)<>0 then begin
    col:=3-col;
    _xor:=$a8;
  end;
  // decode the opcodes */
  ptemp2:=mem_dec;
  inc(ptemp2,f);
  ptemp2^:=(src and not($a8)) or (convtable[juego][2*row][col] xor _xor);
  // decode the data */
  ptemp^:=(src and not($a8)) or (convtable[juego][2*row+1][col] xor _xor);
end;
end;

end.
