unit sega_decrypt_2;

interface
uses {$IFDEF WINDOWS}windows,{$ENDIF}misc_functions;

const
  S315_5179=0;  //Robo Wrestle 2001
  S315_5177=1;  //Wonder Boy
  S317_000X=2;  //Calorie Kun

procedure decode_sega_type2(rom,rom_dec:pbyte;cpu_type:byte;shift:byte=0);

implementation
const
  convtable:array[0..1,0..1,0..127] of byte=(
    (($00,$45,$41,$14,$10,$55,$51,$01,
     $04,$40,$45,$11,$14,$50,$00,$05,
     $41,$44,$10,$15,$51,$54,$04,$00,
     $45,$41,$14,$10,$55,$05,$01,$44,
     $40,$15,$11,$54,$50,$00,$05,$41,
     $44,$10,$15,$51,$01,$04,$40,$45,
     $11,$14,$50,$55,$05,$01,$44,$40,
     $15,$11,$54,$04,$00,$45,$41,$14,
     $50,$00,$05,$41,$44,$10,$15,$51,
     $54,$04,$00,$45,$41,$14,$50,$55,
     $05,$01,$44,$40,$15,$11,$54,$50,
		 $00,$05,$41,$44,$10,$55,$51,$01,
     $04,$40,$45,$11,$14,$50,$55,$05,
     $01,$44,$40,$15,$51,$54,$04,$00,
     $45,$41,$14,$10,$55,$51,$01,$04,
		 $40,$45,$11,$54,$50,$00,$05,$41),
    (8, 9,11,13,15, 0, 2, 4,
     6, 8, 9,11,13,15, 1, 2,
     4, 6, 8, 9,11,13,15, 1,
     2, 4, 6, 8, 9,11,13,15,
     1, 2, 4, 6, 8,10,11,13,
    15, 1, 2, 4, 6, 8,10,11,
    13,15, 1, 2, 4, 6, 8,10,
    11,13,15, 1, 3, 4, 6, 8,
		 7, 1, 2, 4, 6, 0, 1, 3,
     5, 7, 1, 2, 4, 6, 0, 1,
     3, 5, 7, 1, 2, 4, 6, 0,
     2, 3, 5, 7, 1, 2, 4, 6,
     0, 2, 3, 5, 7, 1, 2, 4,
     6, 0, 2, 3, 5, 7, 1, 3,
     4, 6, 0, 2, 3, 5, 7, 1,
     3, 4, 6, 0, 2, 4, 5, 7)),
    (($04,$54,$51,$15,$40,$44,$01,$51,$55,$10,$44,$41,
			$05,$55,$50,$14,$41,$45,$00,$50,$54,$11,$45,$40,
			$04,$54,$51,$15,$40,$44,$01,$51,$55,$10,$44,$41,
			$05,$55,$50,$14,$41,$45,$00,$50,$54,$11,$45,$40,
			$04,$54,$51,$15,$40,$44,$01,$51,$55,$10,$44,$41,
			$05,$55,$50,$14,$04,$54,$51,$15,$40,$44,$01,$51,
      $55,$10,$44,$41,$05,$55,$50,$14,$41,$45,$00,$50,
      $54,$11,$45,$40,$04,$54,$51,$15,$40,$44,$01,$51,
      $55,$10,$44,$41,$05,$55,$50,$14,$41,$45,$00,$50,
      $54,$11,$45,$40,$04,$54,$51,$15,$40,$44,$01,$51,
      $55,$10,$44,$41,$05,$55,$50,$14),
    (0,0,0,0,1,1,1,1,1,
			2,2,2,2,2,3,3,3,3,
			4,4,4,4,4,5,5,5,5,5,
			6,6,6,6,6,7,7,7,7,7,
			8,8,8,8,9,9,9,9,9,
			10,10,10,10,10,11,11,11,11,11,
			12,12,12,12,12,13,13,
			8,8,8,8,9,9,9,9,9,
			10,10,10,10,10,11,11,11,11,
			12,12,12,12,12,13,13,13,13,13,
			14,14,14,14,14,15,15,15,15,15,
			16,16,16,16,17,17,17,17,17,
			18,18,18,18,18,19,19,19,19,19,
			20,20,20,20,20,21,21)));

    s317_convtable:array[0..1,0..130] of byte=(
    ($04,$54,$44,$14,$15,$15,$51,$41,$41,$14,$10,$50,$15,$55,$54,$05,
		 $04,$41,$51,$01,$05,$10,$55,$51,$05,$05,$54,$11,$45,$05,$04,$14,
		 $10,$55,$01,$41,$51,$05,$55,$04,$45,$41,$55,$14,$45,$10,$04,$45,
		 $55,$50,$40,$00,$11,$45,$15,$00,$01,$00,$40,$00,$01,$45,$11,$00,
		 $45,$00,$44,$54,$40,$04,$05,$15,$15,$10,$15,$04,$01,$05,$50,$11,
		 $00,$44,$44,$04,$04,$01,$50,$05,$51,$00,$45,$44,$50,$15,$54,$40,
		 $41,$45,$40,$10,$14,$15,$40,$51,$50,$50,$45,$00,$10,$15,$05,$51,
		 $50,$44,$01,$15,$40,$04,$01,$44,$50,$44,$50,$50,$50,$10,$44,$04,
		 $40,$04,$10),
    (7, 7,12, 1,18,11, 8,23,21,17, 0,23,22, 0,21,15,
			13,19,21,20,20,12,13,10,20, 0,14,18, 6,18, 3, 5,
			 5,20,20,13, 8, 0,20,18, 4,14, 8, 5,17, 6,22,10,
			 0,21, 0, 1, 6,11,17, 9,17, 3, 9,21, 0, 4,16, 1,
			13,17,21, 5, 3, 7, 2,16,18,13, 6,19,11,23, 3,20,
			 3, 2,18,10,18,23,19,23, 3,15, 0,10, 5,12, 0, 0,
			11,22, 8,14, 8, 6, 1,15, 7,11, 2,17,10,15, 8,21,
			10, 0, 2, 6, 1, 1, 3, 1,12,18,16, 5, 0,15,17,15,
			10,20, 1));

procedure decode_sega_type2(rom,rom_dec:pbyte;cpu_type:byte;shift:byte=0);
const
	swaptable:array[0..23,0..3] of byte=(
			( 6,4,2,0 ), ( 4,6,2,0 ), ( 2,4,6,0 ), ( 0,4,2,6 ),
			( 6,2,4,0 ), ( 6,0,2,4 ), ( 6,4,0,2 ), ( 2,6,4,0 ),
			( 4,2,6,0 ), ( 4,6,0,2 ), ( 6,0,4,2 ), ( 0,6,4,2 ),
			( 4,0,6,2 ), ( 0,4,6,2 ), ( 6,2,0,4 ), ( 2,6,0,4 ),
			( 0,6,2,4 ), ( 2,0,6,4 ), ( 0,2,6,4 ), ( 4,2,0,6 ),
			( 2,4,0,6 ), ( 4,0,2,6 ), ( 2,0,4,6 ), ( 0,2,4,6 ));
var
  f:word;
  src,row,m:byte;
  tbl:array[0..3] of byte;
begin
  if cpu_type=S317_000X then begin
    for f:=0 to $7fff do begin
		  src:=rom[f];
		  // pick the translation table from bits 0, 3, 6, 9, 12 and 14 of the address
      row:=(BIT_n(f,14) shl 5) or (BIT_n(f,12) shl 4) or (BIT_n(f,9) shl 3) or (BIT_n(f,6) shl 2) or (BIT_n(f,3) shl 1) or (BIT_n(f,0) shl 0);
		  // decode the opcodes
      for m:=0 to 3 do tbl[m]:=swaptable[s317_convtable[1,2*row+shift],m];
		  rom_dec[f]:=BITSWAP8(src,7,tbl[0],5,tbl[1],3,tbl[2],1,tbl[3]) xor s317_convtable[0,2*row+shift];
		  // decode the data
      for m:=0 to 3 do tbl[m]:=swaptable[s317_convtable[1,2*row+1+shift],m];
		  rom[f]:=BITSWAP8(src,7,tbl[0],5,tbl[1],3,tbl[2],1,tbl[3]) xor s317_convtable[0,2*row+1+shift];
    end;
  end else begin
	  for f:=0 to $7fff do begin
		  src:=rom[f];
		  // pick the translation table from bits 0, 3, 6, 9, 12 and 14 of the address
      row:=(BIT_n(f,14) shl 5) or (BIT_n(f,12) shl 4) or (BIT_n(f,9) shl 3) or (BIT_n(f,6) shl 2) or (BIT_n(f,3) shl 1) or (BIT_n(f,0) shl 0);
		  // decode the opcodes
      for m:=0 to 3 do tbl[m]:=swaptable[convtable[cpu_type,1,2*row],m];
		  rom_dec[f]:=BITSWAP8(src,7,tbl[0],5,tbl[1],3,tbl[2],1,tbl[3]) xor convtable[cpu_type,0,2*row];
		  // decode the data
      for m:=0 to 3 do tbl[m]:=swaptable[convtable[cpu_type,1,2*row+1],m];
		  rom[f]:=BITSWAP8(src,7,tbl[0],5,tbl[1],3,tbl[2],1,tbl[3]) xor convtable[cpu_type,0,2*row+1];
    end;
  end;
end;

end.
